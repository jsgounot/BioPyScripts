import glob, os

configfile: "config.json"

DEFAULT_THREADS = 4
DEFAULT_MEMORY_MB = 4000
DEFAULT_BRACKEN_RANKS = {"species" : "S", "genus" : "G"}

# -------------------------------------------------------------------------------------------

print ("Read configuration file")

inputs_values = []

for sample, names in config.items() :
    for name, parameters in names.items() :
        print ("Check parameters for %s - %s" %(sample, name))
        parameters.setdefault("kraken_adding", [])
        
        reads = parameters.get("reads", None)
        if not reads : raise Exception("No reads provided here")     
        print ("%i reads provided" %(len(reads)))       

        if len(reads) == 2 :
            if str(parameters.get("paired")) != "False" :
                print ("2 reads detected and paired NOT set to False, assume it's paired reads")
                parameters["kraken_adding"].append("--paired")
            else :
                print ("2 reads detected and paired set to False, pass")

        for fname in parameters["reads"] :
            if not os.path.isfile(fname) :
                raise Exception("Read not found : %s" %(fname))

        if not os.path.isdir(parameters["database"]) :
            raise Exception("Database directory not found : %s" %(parameters["database"]))

        if any(fname.endswith(".gz") for fname in parameters["reads"]) :
            if not all(fname.endswith(".gz") for fname in parameters["reads"]) :
                raise Exception("Not all reads are gz compressed ?")
            print ("Reads seems to be gzip compressed, add 'gzip-compressed' option")
            parameters["kraken_adding"].append("--gzip-compressed")

        if any(fname.endswith(".bz2") for fname in parameters["reads"]) :
            if not all(fname.endswith(".bz2") for fname in parameters["reads"]) :
                raise Exception("Not all reads are bzip2 compressed ?")
            print ("Reads seems to be bzip2 compressed, add 'bzip2-compressed' option")
            parameters["kraken_adding"].append("--bzip2-compressed")

        parameters["kraken_adding"] = " ".join(add.strip()
            for add in set(parameters["kraken_adding"]))

        parameters["bracken_adding"] = " ".join(add.strip()
            for add in set(parameters.get("bracken_adding", [])))

        parameters.setdefault("bracken_ranks", DEFAULT_BRACKEN_RANKS)
        for rank, code in parameters["bracken_ranks"].items() :
            inputs_values.append((sample, name, rank))
            

def getc(wildcards, final, mandatory=True, default="") :
    sample, name = wildcards.sample, wildcards.name
    if mandatory and final not in config[sample][name] :
        raise Exception("Option not found : %s (%s / %s)" %(final, sample, name))
    return config[sample][name].get(final, default)

samples, names, ranks = zip(* inputs_values)

# -------------------------------------------------------------------------------------------

rule all:
    input:
        expand("results/{sample}/{name}.bracken.{rank}.report.tsv", zip, sample=samples, name=names, rank=ranks)

rule kraken:
    input:
        reads = lambda wildcards : getc(wildcards, "reads"),
        database = lambda wildcards : getc(wildcards, "database")
    output:
        "results/{sample}/{name}.kraken.report.tsv"
    params:
        adding = lambda wildcards : getc(wildcards, "kraken_adding", False)
    threads:
        lambda wildcards : getc(wildcards, "threads", False, DEFAULT_THREADS)
    resources:
         mem_mb = lambda wildcards : getc(wildcards, "memory", False, DEFAULT_MEMORY_MB)
    log:
        "logs/{sample}.{name}.kraken.log"
    shell:
        "kraken2 --db {input.database} --threads {threads} --output - --report {output} {params.adding} {input.reads} 2> {log}"

rule bracken:
    input:
        report = "results/{sample}/{name}.kraken.report.tsv",
        database = lambda wildcards : getc(wildcards, "database")
    output:
        report = "results/{sample}/{name}.bracken.{rank}.report.tsv",
        out = "results/{sample}/{name}.bracken.{rank}.output.tsv"
    params:
        adding = lambda wildcards : getc(wildcards, "bracken_adding", False),
        rank_code = lambda wildcards : getc(wildcards, "bracken_ranks")[wildcards.rank]
    resources:
         mem_mb = lambda wildcards : getc(wildcards, "memory", False, DEFAULT_MEMORY_MB)
    log:
        "logs/{sample}.{name}.{rank}.bracken.log"
    shell:
        "bracken -d {input.database} -i {input.report} -o {output.out} -w {output.report} -l {params.rank_code} {params.adding} 2> {log}"
